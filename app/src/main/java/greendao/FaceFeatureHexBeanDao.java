package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thdtek.acs.terminal.bean.FaceFeatureHexBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_FEATURE_HEX_BEAN".
*/
public class FaceFeatureHexBeanDao extends AbstractDao<FaceFeatureHexBean, Long> {

    public static final String TABLENAME = "FACE_FEATURE_HEX_BEAN";

    /**
     * Properties of entity FaceFeatureHexBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AuthorityId = new Property(1, long.class, "authorityId", false, "AUTHORITY_ID");
        public final static Property PersonId = new Property(2, long.class, "personId", false, "PERSON_ID");
        public final static Property FaceFeatureHex = new Property(3, String.class, "faceFeatureHex", false, "FACE_FEATURE_HEX");
    };


    public FaceFeatureHexBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FaceFeatureHexBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_FEATURE_HEX_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AUTHORITY_ID\" INTEGER NOT NULL ," + // 1: authorityId
                "\"PERSON_ID\" INTEGER NOT NULL ," + // 2: personId
                "\"FACE_FEATURE_HEX\" TEXT);"); // 3: faceFeatureHex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_FEATURE_HEX_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceFeatureHexBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAuthorityId());
        stmt.bindLong(3, entity.getPersonId());
 
        String faceFeatureHex = entity.getFaceFeatureHex();
        if (faceFeatureHex != null) {
            stmt.bindString(4, faceFeatureHex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceFeatureHexBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAuthorityId());
        stmt.bindLong(3, entity.getPersonId());
 
        String faceFeatureHex = entity.getFaceFeatureHex();
        if (faceFeatureHex != null) {
            stmt.bindString(4, faceFeatureHex);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaceFeatureHexBean readEntity(Cursor cursor, int offset) {
        FaceFeatureHexBean entity = new FaceFeatureHexBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // authorityId
            cursor.getLong(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // faceFeatureHex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceFeatureHexBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthorityId(cursor.getLong(offset + 1));
        entity.setPersonId(cursor.getLong(offset + 2));
        entity.setFaceFeatureHex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaceFeatureHexBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaceFeatureHexBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
