package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thdtek.acs.terminal.bean.ConfigBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG_BEAN".
*/
public class ConfigBeanDao extends AbstractDao<ConfigBean, Long> {

    public static final String TABLENAME = "CONFIG_BEAN";

    /**
     * Properties of entity ConfigBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CameraDetectType = new Property(1, int.class, "cameraDetectType", false, "CAMERA_DETECT_TYPE");
        public final static Property FaceFeaturePairNumber = new Property(2, float.class, "faceFeaturePairNumber", false, "FACE_FEATURE_PAIR_NUMBER");
        public final static Property FaceFeaturePairSuccessOrFailWaitTime = new Property(3, long.class, "faceFeaturePairSuccessOrFailWaitTime", false, "FACE_FEATURE_PAIR_SUCCESS_OR_FAIL_WAIT_TIME");
        public final static Property OpenDoorType = new Property(4, int.class, "openDoorType", false, "OPEN_DOOR_TYPE");
        public final static Property OpenDoorContinueTime = new Property(5, long.class, "openDoorContinueTime", false, "OPEN_DOOR_CONTINUE_TIME");
        public final static Property DoorType = new Property(6, int.class, "doorType", false, "DOOR_TYPE");
        public final static Property DeviceName = new Property(7, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceSerialNumber = new Property(8, String.class, "deviceSerialNumber", false, "DEVICE_SERIAL_NUMBER");
        public final static Property DeviceDefendTime = new Property(9, String.class, "deviceDefendTime", false, "DEVICE_DEFEND_TIME");
        public final static Property DeviceIntoOrOut = new Property(10, int.class, "deviceIntoOrOut", false, "DEVICE_INTO_OR_OUT");
        public final static Property DeviceMusicSize = new Property(11, int.class, "deviceMusicSize", false, "DEVICE_MUSIC_SIZE");
        public final static Property AppWelcomeMsg = new Property(12, String.class, "appWelcomeMsg", false, "APP_WELCOME_MSG");
        public final static Property AppWelcomeMusic = new Property(13, String.class, "appWelcomeMusic", false, "APP_WELCOME_MUSIC");
        public final static Property ServerIp = new Property(14, String.class, "serverIp", false, "SERVER_IP");
        public final static Property ServerPort = new Property(15, int.class, "serverPort", false, "SERVER_PORT");
        public final static Property DeviceNetworkType = new Property(16, int.class, "deviceNetworkType", false, "DEVICE_NETWORK_TYPE");
        public final static Property DeviceNetworkIpType = new Property(17, int.class, "deviceNetworkIpType", false, "DEVICE_NETWORK_IP_TYPE");
        public final static Property DeviceIpAddress = new Property(18, String.class, "deviceIpAddress", false, "DEVICE_IP_ADDRESS");
        public final static Property DeviceSn = new Property(19, String.class, "deviceSn", false, "DEVICE_SN");
        public final static Property DeviceServiceTime = new Property(20, long.class, "deviceServiceTime", false, "DEVICE_SERVICE_TIME");
        public final static Property DeviceRegisterTime = new Property(21, long.class, "deviceRegisterTime", false, "DEVICE_REGISTER_TIME");
        public final static Property DeviceRomSize = new Property(22, String.class, "deviceRomSize", false, "DEVICE_ROM_SIZE");
        public final static Property DeviceRomAvailableSize = new Property(23, String.class, "deviceRomAvailableSize", false, "DEVICE_ROM_AVAILABLE_SIZE");
        public final static Property DeviceRamMaxSize = new Property(24, String.class, "deviceRamMaxSize", false, "DEVICE_RAM_MAX_SIZE");
        public final static Property DeviceRamTotalSize = new Property(25, String.class, "deviceRamTotalSize", false, "DEVICE_RAM_TOTAL_SIZE");
        public final static Property DeviceRamUseSize = new Property(26, String.class, "deviceRamUseSize", false, "DEVICE_RAM_USE_SIZE");
        public final static Property DeviceCpuTemperature = new Property(27, int.class, "deviceCpuTemperature", false, "DEVICE_CPU_TEMPERATURE");
        public final static Property DeviceTemperature = new Property(28, int.class, "deviceTemperature", false, "DEVICE_TEMPERATURE");
        public final static Property DeviceSystemVersion = new Property(29, String.class, "deviceSystemVersion", false, "DEVICE_SYSTEM_VERSION");
        public final static Property DeviceAppVersion = new Property(30, String.class, "deviceAppVersion", false, "DEVICE_APP_VERSION");
        public final static Property DeviceCameraSdkVersion = new Property(31, String.class, "deviceCameraSdkVersion", false, "DEVICE_CAMERA_SDK_VERSION");
        public final static Property DeviceHardwareSdkVersion = new Property(32, String.class, "deviceHardwareSdkVersion", false, "DEVICE_HARDWARE_SDK_VERSION");
        public final static Property DeviceElapsedRealtime = new Property(33, long.class, "deviceElapsedRealtime", false, "DEVICE_ELAPSED_REALTIME");
        public final static Property AppFailMsg = new Property(34, String.class, "appFailMsg", false, "APP_FAIL_MSG");
        public final static Property IdFeaturePairNumber = new Property(35, float.class, "idFeaturePairNumber", false, "ID_FEATURE_PAIR_NUMBER");
        public final static Property GuestOpenDoorType = new Property(36, int.class, "guestOpenDoorType", false, "GUEST_OPEN_DOOR_TYPE");
        public final static Property GuestOpenDoorNumber = new Property(37, String.class, "guestOpenDoorNumber", false, "GUEST_OPEN_DOOR_NUMBER");
    };


    public ConfigBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CAMERA_DETECT_TYPE\" INTEGER NOT NULL ," + // 1: cameraDetectType
                "\"FACE_FEATURE_PAIR_NUMBER\" REAL NOT NULL ," + // 2: faceFeaturePairNumber
                "\"FACE_FEATURE_PAIR_SUCCESS_OR_FAIL_WAIT_TIME\" INTEGER NOT NULL ," + // 3: faceFeaturePairSuccessOrFailWaitTime
                "\"OPEN_DOOR_TYPE\" INTEGER NOT NULL ," + // 4: openDoorType
                "\"OPEN_DOOR_CONTINUE_TIME\" INTEGER NOT NULL ," + // 5: openDoorContinueTime
                "\"DOOR_TYPE\" INTEGER NOT NULL ," + // 6: doorType
                "\"DEVICE_NAME\" TEXT," + // 7: deviceName
                "\"DEVICE_SERIAL_NUMBER\" TEXT," + // 8: deviceSerialNumber
                "\"DEVICE_DEFEND_TIME\" TEXT," + // 9: deviceDefendTime
                "\"DEVICE_INTO_OR_OUT\" INTEGER NOT NULL ," + // 10: deviceIntoOrOut
                "\"DEVICE_MUSIC_SIZE\" INTEGER NOT NULL ," + // 11: deviceMusicSize
                "\"APP_WELCOME_MSG\" TEXT," + // 12: appWelcomeMsg
                "\"APP_WELCOME_MUSIC\" TEXT," + // 13: appWelcomeMusic
                "\"SERVER_IP\" TEXT," + // 14: serverIp
                "\"SERVER_PORT\" INTEGER NOT NULL ," + // 15: serverPort
                "\"DEVICE_NETWORK_TYPE\" INTEGER NOT NULL ," + // 16: deviceNetworkType
                "\"DEVICE_NETWORK_IP_TYPE\" INTEGER NOT NULL ," + // 17: deviceNetworkIpType
                "\"DEVICE_IP_ADDRESS\" TEXT," + // 18: deviceIpAddress
                "\"DEVICE_SN\" TEXT," + // 19: deviceSn
                "\"DEVICE_SERVICE_TIME\" INTEGER NOT NULL ," + // 20: deviceServiceTime
                "\"DEVICE_REGISTER_TIME\" INTEGER NOT NULL ," + // 21: deviceRegisterTime
                "\"DEVICE_ROM_SIZE\" TEXT," + // 22: deviceRomSize
                "\"DEVICE_ROM_AVAILABLE_SIZE\" TEXT," + // 23: deviceRomAvailableSize
                "\"DEVICE_RAM_MAX_SIZE\" TEXT," + // 24: deviceRamMaxSize
                "\"DEVICE_RAM_TOTAL_SIZE\" TEXT," + // 25: deviceRamTotalSize
                "\"DEVICE_RAM_USE_SIZE\" TEXT," + // 26: deviceRamUseSize
                "\"DEVICE_CPU_TEMPERATURE\" INTEGER NOT NULL ," + // 27: deviceCpuTemperature
                "\"DEVICE_TEMPERATURE\" INTEGER NOT NULL ," + // 28: deviceTemperature
                "\"DEVICE_SYSTEM_VERSION\" TEXT," + // 29: deviceSystemVersion
                "\"DEVICE_APP_VERSION\" TEXT," + // 30: deviceAppVersion
                "\"DEVICE_CAMERA_SDK_VERSION\" TEXT," + // 31: deviceCameraSdkVersion
                "\"DEVICE_HARDWARE_SDK_VERSION\" TEXT," + // 32: deviceHardwareSdkVersion
                "\"DEVICE_ELAPSED_REALTIME\" INTEGER NOT NULL ," + // 33: deviceElapsedRealtime
                "\"APP_FAIL_MSG\" TEXT," + // 34: appFailMsg
                "\"ID_FEATURE_PAIR_NUMBER\" REAL NOT NULL ," + // 35: idFeaturePairNumber
                "\"GUEST_OPEN_DOOR_TYPE\" INTEGER NOT NULL ," + // 36: guestOpenDoorType
                "\"GUEST_OPEN_DOOR_NUMBER\" TEXT);"); // 37: guestOpenDoorNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCameraDetectType());
        stmt.bindDouble(3, entity.getFaceFeaturePairNumber());
        stmt.bindLong(4, entity.getFaceFeaturePairSuccessOrFailWaitTime());
        stmt.bindLong(5, entity.getOpenDoorType());
        stmt.bindLong(6, entity.getOpenDoorContinueTime());
        stmt.bindLong(7, entity.getDoorType());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(9, deviceSerialNumber);
        }
 
        String deviceDefendTime = entity.getDeviceDefendTime();
        if (deviceDefendTime != null) {
            stmt.bindString(10, deviceDefendTime);
        }
        stmt.bindLong(11, entity.getDeviceIntoOrOut());
        stmt.bindLong(12, entity.getDeviceMusicSize());
 
        String appWelcomeMsg = entity.getAppWelcomeMsg();
        if (appWelcomeMsg != null) {
            stmt.bindString(13, appWelcomeMsg);
        }
 
        String appWelcomeMusic = entity.getAppWelcomeMusic();
        if (appWelcomeMusic != null) {
            stmt.bindString(14, appWelcomeMusic);
        }
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(15, serverIp);
        }
        stmt.bindLong(16, entity.getServerPort());
        stmt.bindLong(17, entity.getDeviceNetworkType());
        stmt.bindLong(18, entity.getDeviceNetworkIpType());
 
        String deviceIpAddress = entity.getDeviceIpAddress();
        if (deviceIpAddress != null) {
            stmt.bindString(19, deviceIpAddress);
        }
 
        String deviceSn = entity.getDeviceSn();
        if (deviceSn != null) {
            stmt.bindString(20, deviceSn);
        }
        stmt.bindLong(21, entity.getDeviceServiceTime());
        stmt.bindLong(22, entity.getDeviceRegisterTime());
 
        String deviceRomSize = entity.getDeviceRomSize();
        if (deviceRomSize != null) {
            stmt.bindString(23, deviceRomSize);
        }
 
        String deviceRomAvailableSize = entity.getDeviceRomAvailableSize();
        if (deviceRomAvailableSize != null) {
            stmt.bindString(24, deviceRomAvailableSize);
        }
 
        String deviceRamMaxSize = entity.getDeviceRamMaxSize();
        if (deviceRamMaxSize != null) {
            stmt.bindString(25, deviceRamMaxSize);
        }
 
        String deviceRamTotalSize = entity.getDeviceRamTotalSize();
        if (deviceRamTotalSize != null) {
            stmt.bindString(26, deviceRamTotalSize);
        }
 
        String deviceRamUseSize = entity.getDeviceRamUseSize();
        if (deviceRamUseSize != null) {
            stmt.bindString(27, deviceRamUseSize);
        }
        stmt.bindLong(28, entity.getDeviceCpuTemperature());
        stmt.bindLong(29, entity.getDeviceTemperature());
 
        String deviceSystemVersion = entity.getDeviceSystemVersion();
        if (deviceSystemVersion != null) {
            stmt.bindString(30, deviceSystemVersion);
        }
 
        String deviceAppVersion = entity.getDeviceAppVersion();
        if (deviceAppVersion != null) {
            stmt.bindString(31, deviceAppVersion);
        }
 
        String deviceCameraSdkVersion = entity.getDeviceCameraSdkVersion();
        if (deviceCameraSdkVersion != null) {
            stmt.bindString(32, deviceCameraSdkVersion);
        }
 
        String deviceHardwareSdkVersion = entity.getDeviceHardwareSdkVersion();
        if (deviceHardwareSdkVersion != null) {
            stmt.bindString(33, deviceHardwareSdkVersion);
        }
        stmt.bindLong(34, entity.getDeviceElapsedRealtime());
 
        String appFailMsg = entity.getAppFailMsg();
        if (appFailMsg != null) {
            stmt.bindString(35, appFailMsg);
        }
        stmt.bindDouble(36, entity.getIdFeaturePairNumber());
        stmt.bindLong(37, entity.getGuestOpenDoorType());
 
        String guestOpenDoorNumber = entity.getGuestOpenDoorNumber();
        if (guestOpenDoorNumber != null) {
            stmt.bindString(38, guestOpenDoorNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCameraDetectType());
        stmt.bindDouble(3, entity.getFaceFeaturePairNumber());
        stmt.bindLong(4, entity.getFaceFeaturePairSuccessOrFailWaitTime());
        stmt.bindLong(5, entity.getOpenDoorType());
        stmt.bindLong(6, entity.getOpenDoorContinueTime());
        stmt.bindLong(7, entity.getDoorType());
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(9, deviceSerialNumber);
        }
 
        String deviceDefendTime = entity.getDeviceDefendTime();
        if (deviceDefendTime != null) {
            stmt.bindString(10, deviceDefendTime);
        }
        stmt.bindLong(11, entity.getDeviceIntoOrOut());
        stmt.bindLong(12, entity.getDeviceMusicSize());
 
        String appWelcomeMsg = entity.getAppWelcomeMsg();
        if (appWelcomeMsg != null) {
            stmt.bindString(13, appWelcomeMsg);
        }
 
        String appWelcomeMusic = entity.getAppWelcomeMusic();
        if (appWelcomeMusic != null) {
            stmt.bindString(14, appWelcomeMusic);
        }
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(15, serverIp);
        }
        stmt.bindLong(16, entity.getServerPort());
        stmt.bindLong(17, entity.getDeviceNetworkType());
        stmt.bindLong(18, entity.getDeviceNetworkIpType());
 
        String deviceIpAddress = entity.getDeviceIpAddress();
        if (deviceIpAddress != null) {
            stmt.bindString(19, deviceIpAddress);
        }
 
        String deviceSn = entity.getDeviceSn();
        if (deviceSn != null) {
            stmt.bindString(20, deviceSn);
        }
        stmt.bindLong(21, entity.getDeviceServiceTime());
        stmt.bindLong(22, entity.getDeviceRegisterTime());
 
        String deviceRomSize = entity.getDeviceRomSize();
        if (deviceRomSize != null) {
            stmt.bindString(23, deviceRomSize);
        }
 
        String deviceRomAvailableSize = entity.getDeviceRomAvailableSize();
        if (deviceRomAvailableSize != null) {
            stmt.bindString(24, deviceRomAvailableSize);
        }
 
        String deviceRamMaxSize = entity.getDeviceRamMaxSize();
        if (deviceRamMaxSize != null) {
            stmt.bindString(25, deviceRamMaxSize);
        }
 
        String deviceRamTotalSize = entity.getDeviceRamTotalSize();
        if (deviceRamTotalSize != null) {
            stmt.bindString(26, deviceRamTotalSize);
        }
 
        String deviceRamUseSize = entity.getDeviceRamUseSize();
        if (deviceRamUseSize != null) {
            stmt.bindString(27, deviceRamUseSize);
        }
        stmt.bindLong(28, entity.getDeviceCpuTemperature());
        stmt.bindLong(29, entity.getDeviceTemperature());
 
        String deviceSystemVersion = entity.getDeviceSystemVersion();
        if (deviceSystemVersion != null) {
            stmt.bindString(30, deviceSystemVersion);
        }
 
        String deviceAppVersion = entity.getDeviceAppVersion();
        if (deviceAppVersion != null) {
            stmt.bindString(31, deviceAppVersion);
        }
 
        String deviceCameraSdkVersion = entity.getDeviceCameraSdkVersion();
        if (deviceCameraSdkVersion != null) {
            stmt.bindString(32, deviceCameraSdkVersion);
        }
 
        String deviceHardwareSdkVersion = entity.getDeviceHardwareSdkVersion();
        if (deviceHardwareSdkVersion != null) {
            stmt.bindString(33, deviceHardwareSdkVersion);
        }
        stmt.bindLong(34, entity.getDeviceElapsedRealtime());
 
        String appFailMsg = entity.getAppFailMsg();
        if (appFailMsg != null) {
            stmt.bindString(35, appFailMsg);
        }
        stmt.bindDouble(36, entity.getIdFeaturePairNumber());
        stmt.bindLong(37, entity.getGuestOpenDoorType());
 
        String guestOpenDoorNumber = entity.getGuestOpenDoorNumber();
        if (guestOpenDoorNumber != null) {
            stmt.bindString(38, guestOpenDoorNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConfigBean readEntity(Cursor cursor, int offset) {
        ConfigBean entity = new ConfigBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cameraDetectType
            cursor.getFloat(offset + 2), // faceFeaturePairNumber
            cursor.getLong(offset + 3), // faceFeaturePairSuccessOrFailWaitTime
            cursor.getInt(offset + 4), // openDoorType
            cursor.getLong(offset + 5), // openDoorContinueTime
            cursor.getInt(offset + 6), // doorType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceSerialNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceDefendTime
            cursor.getInt(offset + 10), // deviceIntoOrOut
            cursor.getInt(offset + 11), // deviceMusicSize
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // appWelcomeMsg
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // appWelcomeMusic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // serverIp
            cursor.getInt(offset + 15), // serverPort
            cursor.getInt(offset + 16), // deviceNetworkType
            cursor.getInt(offset + 17), // deviceNetworkIpType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // deviceIpAddress
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // deviceSn
            cursor.getLong(offset + 20), // deviceServiceTime
            cursor.getLong(offset + 21), // deviceRegisterTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // deviceRomSize
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // deviceRomAvailableSize
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // deviceRamMaxSize
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // deviceRamTotalSize
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // deviceRamUseSize
            cursor.getInt(offset + 27), // deviceCpuTemperature
            cursor.getInt(offset + 28), // deviceTemperature
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // deviceSystemVersion
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // deviceAppVersion
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // deviceCameraSdkVersion
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // deviceHardwareSdkVersion
            cursor.getLong(offset + 33), // deviceElapsedRealtime
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // appFailMsg
            cursor.getFloat(offset + 35), // idFeaturePairNumber
            cursor.getInt(offset + 36), // guestOpenDoorType
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37) // guestOpenDoorNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConfigBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCameraDetectType(cursor.getInt(offset + 1));
        entity.setFaceFeaturePairNumber(cursor.getFloat(offset + 2));
        entity.setFaceFeaturePairSuccessOrFailWaitTime(cursor.getLong(offset + 3));
        entity.setOpenDoorType(cursor.getInt(offset + 4));
        entity.setOpenDoorContinueTime(cursor.getLong(offset + 5));
        entity.setDoorType(cursor.getInt(offset + 6));
        entity.setDeviceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceSerialNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceDefendTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeviceIntoOrOut(cursor.getInt(offset + 10));
        entity.setDeviceMusicSize(cursor.getInt(offset + 11));
        entity.setAppWelcomeMsg(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAppWelcomeMusic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setServerIp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setServerPort(cursor.getInt(offset + 15));
        entity.setDeviceNetworkType(cursor.getInt(offset + 16));
        entity.setDeviceNetworkIpType(cursor.getInt(offset + 17));
        entity.setDeviceIpAddress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDeviceSn(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDeviceServiceTime(cursor.getLong(offset + 20));
        entity.setDeviceRegisterTime(cursor.getLong(offset + 21));
        entity.setDeviceRomSize(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDeviceRomAvailableSize(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setDeviceRamMaxSize(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDeviceRamTotalSize(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setDeviceRamUseSize(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setDeviceCpuTemperature(cursor.getInt(offset + 27));
        entity.setDeviceTemperature(cursor.getInt(offset + 28));
        entity.setDeviceSystemVersion(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDeviceAppVersion(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDeviceCameraSdkVersion(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setDeviceHardwareSdkVersion(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setDeviceElapsedRealtime(cursor.getLong(offset + 33));
        entity.setAppFailMsg(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setIdFeaturePairNumber(cursor.getFloat(offset + 35));
        entity.setGuestOpenDoorType(cursor.getInt(offset + 36));
        entity.setGuestOpenDoorNumber(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConfigBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConfigBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
