syntax = "proto2";

option java_package = "com.thdtek.acs.terminal";
package bean;

message Message {
    //登录,客户端请求
    message LoginReq {
        optional uint32 ver = 1; //协议版本号,目前 1
        optional string sn = 2; //设备序列号
    }

    //登录,服务器返回
    message LoginRsp {
        optional uint32 status = 1; //状态码：0代表登录成功，1代表设备未注册，2代表版本不支持，3代表服务器内部错误, 4错误的登录包, 5代表设备未激活
        optional uint64 salt = 2; //已废弃
        optional Config config = 3; //终端详细配置信息
    }

    //APP配置
    message Config {
        //================================== 可配置选项 ==================================
        optional uint32 camera_detect_type = 1; //摄像头检测人脸的方式,0代表活体检测,1代表非活体检测
        optional float face_feature_pair_number = 2; //特征值对比的阈值,0.0-1.0,默认值=0.6
        optional uint32 face_feature_pair_success_or_fail_wait_time = 3; //人脸特征值比对成功或失败后的等待时间,单位:毫秒,默认:2000
        optional uint32 open_door_type = 4; //开门条件,0:人脸,1:身份证,2:工号,3:人脸+身份证,4:人脸+工号,未使用
        optional uint32 open_door_continue_time = 5; //开门持续时间,单位:毫秒,默认:1000
        optional uint32 door_type = 6; //0:继电器  24维根  36维根
        optional string device_name = 7; //设备名称
        optional string device_serial_number = 8; //设备编号
        optional string device_defend_time = 9; //0-24 之间,00:00
        optional uint32 device_into_or_out = 11; //设备属于 进 还是 出 的类型,0:进,1:出
        optional uint32 device_music_size = 12; //设备音量 0-100
        optional string app_welcome_msg = 13; //识别成功的语音提示，如：欢迎光临，%    %代表识别出的人名
        optional string app_welcome_music = 14; //成功开闸后的语音提示,这里传文件名,未使用
        optional string app_fail_msg = 15; //识别失败的语音提示
        optional uint32 visitor_open_door_type = 16; //访客开门条件  0:未启用,1:人脸+身份证
        optional string visitor_card_no = 17; //访客使用的特殊卡号
        optional float id_card_face_feature_pair_number = 18; //身份证比对时的阈值，默认0.5
    }

    //注册设备,客户端请求
    message RegisterDeviceReq {
        optional string device_sn = 1; //终端设备序列号
        optional string device_name = 2; //设备名称,默认是:device_sn的值
        optional bytes device_key = 3; //16个byte的设备秘钥，由终端生成并发送给服务器
    }
    //注册设备,服务器返回
    message RegisterDeviceRsp {
        optional int32 status = 1; //0代表设置成功，其他代表错误
    }

    //配置终端,服务器推送
    message SetConfigReq {
        optional Config config = 1; //详细的配置信息
    }
    //配置终端,客户端返回
    message SetConfigRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }

    //已废弃
    message CheckFaceReq {
        optional bytes face_pic = 1; //人脸图片数据
        optional float face_feature_match_threshold = 2; //对比人脸时特征值相似度的阈值,0.0-1.0,默认值=0.9
    }
    //已废弃
    message CheckFaceRsp {
        optional int32 status = 1; //0:图片正常,并且没有相同数据匹配,1:图片不正常或者有相同数据匹配
        optional string error_msg = 2; //图片比对失败的信息
        optional uint64 person_id = 3; //如果匹配，返回匹配者的服务器内部编号
    }

    //心跳,客户端请求
    message HeartBeatReq {
        optional uint64 last_action_id = 1; //终端的最后事件id                                   ,已弃用
        optional string server_ip = 15; //服务器的ip地址                                         ,未使用
        optional uint32 server_port = 16; //服务器的端口号                                       ,未使用
        optional uint32 device_network_type = 17; //设备当前网络类型,0:wifi,1:以太网               ,未使用
        optional uint32 device_network_ip_type = 18; //设备当前网络获取ip的方式,0:DHCP,1:静态IP     ,未使用
        optional string device_ip_address = 19; //设备当前ip地址
        optional string device_sn = 20; //终端设备序列号
        optional uint64 device_service_time = 21; //设备服役时间 秒                              ,未使用
        optional uint64 device_register_time = 22; //设备注册时间 秒
        optional string device_rom_size = 23; //设备ROM总的使用大小,MB
        optional string device_rom_available_size = 24; //设备ROM剩余可用的大小,MB
        optional string device_ram_max_size = 25; //设备RAM APP 能申请的最大值,MB                 ,未使用
        optional string device_ram_total_size = 26; //设备RAM 已经申请的内存,MB                   ,未使用
        optional string device_ram_use_size = 27; //设备RAM 已经使用的内存,MB                     ,未使用
        optional uint32 device_cpu_temperature = 28; //设备CPU温度                              ,未使用
        optional uint32 device_temperature = 29; //设备温度                                     ,未使用
        optional string device_system_version = 30; //设备系统版本
        optional string device_app_version = 31; //设备中本APP的版本
        optional string device_camera_sdk_version = 32; //设备中人脸识别sdk版本                   ,未使用
        optional string device_hardware_sdk_version = 33; //设备中硬件sdk版本(开闸,关闸等)         ,未使用
        optional uint64 device_elapsed_realtime = 34; //设备开机到现在的时间 秒
    }
    //心跳,服务器返回
    message HeartBeatRsp {
        optional uint64 last_action_id = 1; //服务器的最后事件id,已废弃
        optional int32 temperature = 2; //天气温度
        optional int32 day_pic_index = 3; //天气状况图片序号，白天
        optional int32 night_pic_index = 4; //天气状况图片序号，夜晚
    }

    //设置客户端系统时间,服务器推送
    message SetTimeReq {
        optional uint64 ts = 1; //设置设备当前时间，unixtime，单位为秒
    }
    //设置客户端系统时间,客户端返回
    message SetTimeRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }

    //拉取全量数据(权限和Person),客户端请求
    message RsyncDataListReq {
        optional uint64 local_total = 1; //本地记录数,未使用
        optional uint64 local_min_id = 2; //本地记录中ID最小值,未使用
        optional uint64 local_max_id = 3; //本地记录中ID最大值,未使用
        optional double local_min_ts = 4; //本地记录中最小时间戳，unixtime，单位为秒,未使用
        optional double local_max_ts = 5; //本地记录中最大时间戳，unixtime，单位为秒,未使用
        optional bytes local_md5 = 6; //本地记录ID、ts列表的md5校验码,未使用
        optional int32 data_type = 7; // 0代表同步权限列表，1代表同步人员列表
    }

    //权限和Person列表对象
    message IdTsPair {
        optional uint64 id = 1;
        optional double ts = 2;
    }
    //拉取全量数据(权限和Person),服务器返回
    message RsyncDataListRsp {
        optional bool need_update = 1; //是否需要更新
        repeated IdTsPair list = 2; //列表内对象
    }

    //拉取单个Person信息,客户端请求
    message RsyncPersonReq {
        optional uint64 person_id = 1;
    }
    //拉取单个Person信息,服务器返回
    message RsyncPersonRsp {
        optional uint64 person_id = 1; //过闸人员的服务器内部编号
        optional double person_ts = 2; //人数据更新时间点，unixtime，单位为秒
        optional bytes face_pic = 3; //人脸图片数据,录入时的照片
        optional string name = 4;
        optional string ID_no = 5; //身份证号
        optional string employee_card_id = 6; //工作证号码
        optional bytes now_pic = 7; //最新的过闸照片
    }

    //拉取单个权限信息,客户端请求
    message RsyncAuthReq {
        optional uint64 auth_id = 1;
    }

    //拉取单个权限信息,服务器返回
    message RsyncAuthRsp {
        optional uint64 auth_id = 1;
        optional double auth_ts = 2;
        optional uint64 person_id = 3;
        optional double start_ts = 4; //有权限过闸的开始时间点，unixtime时间戳，单位为秒,无限值:111111111.0
        optional double end_ts = 5; //有权限过闸的最后时间点，unixtime时间戳，单位为秒,无限值:99999999999.0
        optional int64 count = 6; //有权限过闸的次数, 10000代表可以无限次过闸
        optional string weekly = 7; //按星期设置每天的过闸时间段，为json字符串       
    }

    //单个权限或Person修改信息,服务器推送
    message RsyncActionReq {
        //删除单个权限信息
        message DeleteAuth {
            optional uint64 auth_id = 1;
        }
        //删除单个人
        message DeletePerson {
            optional uint64 person_id = 1;
        }
        oneof body {
            RsyncAuthRsp update_auth = 1; //更新单个权限信息
            RsyncPersonRsp update_person = 2; //更新单个Person
            DeleteAuth delete_auth = 3;
            DeletePerson delete_person = 4;
        }        
    }

    //单个权限或Person修改信息,客户端返回
    message RsyncActionRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }

    //上传通行记录,客户端请求
    message RsyncPassRecordReq {
        optional uint64 person_id = 1;
        optional uint64 auth_id = 2;
        optional double pass_ts = 3; //过闸时间点，unixtime时间戳，单位为秒
        optional int32 method = 4; //过闸方式,0:人脸,1:身份证,2:工号,3:人脸+身份证,4:人脸+工号,未使用
        optional bytes now_img = 5; //过闸时照片,可能不存在
        optional float default_face_feature_rate = 6; //客户端本地保存的比对阈值
        optional float current_face_feature_rate = 7; //本次比对后的阈值
        optional uint64 count = 8; //客户端剩余的过闸次数

    }
    //上传通行记录,服务器返回
    message RsyncPassRecordRsp {
        optional int32 status = 1; //0 成功; 其他失败
    }

    //请求流水记录
    message FetchPassRecordReq{
        optional double start_ts = 1; //此时间点之后的流水日志
        optional bool auto_delete = 2; //是否自动删除已获取的流水记录
        optional uint64 count = 3; //需要多少条
    }   
    
    message SimplePassRecord{
        optional uint64 person_id = 1;
        optional double pass_ts = 3; //过闸时间点，unixtime时间戳，单位为秒
        optional int32 method = 4; //过闸方式,0:人脸,1:身份证,2:工号,3:人脸+身份证,4:人脸+工号,未使用
        optional bytes now_img = 5; //过闸时照片,可能不存在
    }
    
    //返回流水记录列表
    message  FetchPassRecordRsp{
        repeated SimplePassRecord record_list = 1;
        optional bool has_more = 2; //是否还有更多流水日志
    }
    
    //服务器操作客户端,服务器推送
    message DeviceCtrlReq {
        enum CtrlType {
            REBOOT = 0; //重启
            OPEN_DOOR = 1; //开闸
            CLOSE_DOOR = 2; //关闸
        }
        optional CtrlType ctrl = 1;
    }
    //服务器操作客户端,客户端返回
    message DeviceCtrlRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }

    //服务器下发指令给客户端
    message SendCmdReq{
        optional string cmd = 1;
    }    
    message SendCmdRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }
    
    //升级APK
    message UpdateAPKReq{
        optional string apk_url = 1; //apk的HTTP文件路径
        optional string md5 = 2; //apk文件的md5码
        enum UpdateFlag{
            RELOAD_NOW = 0;  //立即更新并重新拉起app
            RELOAD_LATTER = 1; //设备重启后更新app
        }
        optional UpdateFlag flag = 3;
    }

    message UpdateAPKRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }

    //广告更新通知
    message NotifyADUpdateReq {
        optional string url = 1; //广告接口地址
    }
    message NotifyADUpdateRsp {
        optional int32 status = 1; //0:成功
        optional string error_msg = 2; //错误信息
    }
    
    oneof body {
        LoginReq login_req = 1;
        LoginRsp login_rsp = 2;
        RegisterDeviceReq register_device_req = 3;
        RegisterDeviceRsp register_device_rsp = 4;
        SetConfigReq set_config_req = 5;
        SetConfigRsp set_config_rsp = 6;
        CheckFaceReq check_face_req = 7;
        CheckFaceRsp check_face_rsp = 8;
        RsyncActionReq rsync_action_req = 11;
        RsyncActionRsp rsync_action_rsp = 12;
        HeartBeatReq heart_beat_req = 13;
        HeartBeatRsp heart_beat_rsp = 14;
        SetTimeReq set_time_req = 15;
        SetTimeRsp set_time_rsp = 16;
        RsyncDataListReq rsync_data_list_req = 17;
        RsyncDataListRsp rsync_data_list_rsp = 18;
        RsyncAuthReq rsync_auth_req = 19;
        RsyncAuthRsp rsync_auth_rsp = 20;
        RsyncPersonReq rsync_person_req = 21;
        RsyncPersonRsp rsync_person_rsp = 22;
        RsyncPassRecordReq rsync_pass_record_req = 23;
        RsyncPassRecordRsp rsync_pass_record_rsp = 24;
        DeviceCtrlReq device_ctrl_req = 25;
        DeviceCtrlRsp device_ctrl_rsp = 26;
        UpdateAPKReq update_apk_req = 27;
        UpdateAPKRsp update_apk_rsp = 28;
        FetchPassRecordReq fetch_pass_record_req = 29;
        FetchPassRecordRsp fetch_pass_record_rsp = 30;
        NotifyADUpdateReq notify_ad_update_req = 31;
        NotifyADUpdateRsp notify_ad_update_rsp = 32;
        SendCmdReq send_cmd_req = 33;
        SendCmdRsp send_cmd_rsp = 34;
    }
}

message Package {
    optional fixed32 size = 1; //整个Package结构实例的字节数
    optional uint32 seq = 2; //数据包序号，请求发起方填充seq号，接收方回复相同的seq号；终端请求用奇数，服务器端请求用偶数。
    optional bytes data = 3; //加密后的Message字节数组   
}

